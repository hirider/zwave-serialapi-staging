/**
 *
 * \page page-zgw-data Preserving the Z/IP Gateway's Runtime State

*********************************************************************
\section sec_persisted Why is the Runtime State Preserved
*********************************************************************

The Z/IP Gateway process (ZGW or Z/IP Gateway) should be able to
retain its runtime state across system reboot and process/service restart.

For this reason, the running Z/IP Gateway stores ("persists") a basic
set of network and status data to the underlying file system and to
the Z-Wave controller chip.

The Z/IP Gateway migration and -backup features work by
(re-)generating this data set before starting the new Z/IP Gateway Linux
process. Data must be converted because migration data needs to
be human-readable. For more details about the Restore Tool, see \ref
zgw-restore.


*********************************************************************
\section sec_persist_org  Where is the Runtime State Stored
*********************************************************************

The following files are used to make Z/IP Gateway data persistent.

*********************************************************************
\subsection sec_database The Z/IP Gateway SQLite Database File (zipgateway.db)

The file zipgateway.db mainly stores data from the Resource Directory
(\ref ZIP_Resource, abbreviated RD), but also IP association state (\ref
ip_emulation), SPAN table (see \ref SPAN_persistence) and some meta-data
to ensure that the file corresponds to the current bridge controller and
software version. When the gateway enters a new network (set default or by
learn mode) the database file is cleared.

The zipgateway.db file is managed by the \ref rd_data_store component.

\note Data includes structs that are stored in binary format, so
when using the Restore Tool, it is important that its struct alignment
is the same as the Z/IP Gateway's.

For more details on zipgateway.db, see \ref sqlite.

\note The IP association state is not currently supported by the
Restore Tool.

\note The running Z/IP Gateway reads its homeID and nodeID from both the
bridge controller and zipgateway.db, to ensure that they describe the
same Z-Wave network.  If they do not match, Z/IP Gateway will trust the
bridge controller and overwrite the zipgateway.db file.

*********************************************************************
\subsection sec_conffile The Z/IP Gateway Configuration File (zipgateway.cfg)

The zipgateway.cfg file contains the configuration parameters for
the Z/IP Gateway.  If the configuration is changed from the client
application, the file is updated with the new configuration.

For more details about how use the configuration file, see the manual
page of Z/IP Gateway (<a href="zip.html"><b>Manual page of Z/IP Gateway</b></a>).

Note that the zipgateway.cfg file can be modified by the gateway
itself. This can be done even from the Z-Wave PAN side using the COMMAND_CLASS_GATEWAY.

\note The zipgateway.cfg is not generated by the Restore Tool, but
must be populated during the Z/IP Gateway installation in the same way as
during initial installation.


*********************************************************************
\subsection sec_pvlfile The Provisioning List Storage

The file provisioning_list_store.dat stores data from the
provisioning list (\ref pvslist).

\note The configuration file zipgateway_provisioning_list.cfg is
only used during original configuration of the Z/IP Gateway's
provisioning list, not for persistent data.

\note Provisioning List data is not supported by the Restore
Tool.


*********************************************************************
\subsection sec_applnvm The NVR and the NVM Area

The Z/IP Gateway persists data to the application area of the bridge
controller, mainly essential Z/IP Gateway state.  It also reads the
usual Z-Wave properties, including what the bridge controller has
stored about the Z-Wave network, from the bridge controller, i.e.,
the Z/IP Gateway does not need to store duplicates of these data.

\note The running Z/IP Gateway reads its homeID and nodeID from both the
bridge controller and zipgateway.db, to ensure that they describe the
same Z-Wave network.  If they do not match, Z/IP Gateway will trust the
bridge controller and overwrite the zipgateway.db file.


*********************************************************************
\subsection sec_dbs_constants Persistence Constants

The Persistence files contain several fields that are used for
identification and versioning.

The Application NVM area contains the fields Appl NVM magic and
config_version (see \ref zip_nvm_config_t).

The zipgateway.db file contains the fields network.version_major and network.version_minor.

The human-readable provisioning_list.cfg file starts with the version
identifying text "ZIPGateway Smart Start Provisioning List
Configuration, version = "major.minor (See \ref pvslist_cfg).

The provisioning_list.dat file contains a "magic" \ref pvs_store_hdr field
that includes a version.

\note The version of the Restore Tool must match with the version of the
target Z/IP Gateway to generate these fields correctly.

*********************************************************************
\subsection SPAN_persistence S2 SPAN Table Persistence
The Z/IP GW persists the S2 SPAN synchronization with each node on shutdown.
Without persistence, a Z/IP gateway would lose S2 synchronization and
re-synchronization would be required on the next  communication
with each node following a restart.

The S2 SPAN table is automatically persisted prior to shutdown and unpersisted
on startup. See the section \ref run on how to start up and shutdown the
gateway. The Z/IP Gateway will automatically load the most recent persisted S2 SPAN
data on start-up.
The SPAN table is stored in \ref sec_database along with Resource Directory
information and other stored network data.

It is recommended to limit the number of shutdowns and startups to avoid flash
storage wear-out.


*********************************************************************
\section sec_backup_file The Migration and Back-Up Files
*********************************************************************

The migration from older gateways stores all data from the
original controller in the Z-Wave Controller JSON file.  It also
requires the Z/IP Gateway to be installed in the usual way, including
the settings in zipgateway.cfg.  To cover the entire state of a
Z/IP Gateway process, the "rest" of the Z/IP Gateway data (i.e., the
additional data in zipgateway.db, provisioning_list_store.dat and
the NVM application area) is written in a shared ZGW Data File (see \ref zgw_json_schema).


*********************************************************************
\section sec_persist_semantics What Does the Z/IP Gateway Store
*********************************************************************

This section describes the data fields in a running Z/IP Gateway process
that a new Z/IP Gateway process must read from storage, to behave
identically to the original one.

\note This section contains a lot of details and is meant as reference
documentation.  It can be skipped unless specifically needed.

The description is organized by area, i.e., where data is used in
the running Z/IP Gateway process. Some fields from one area may be
persisted in more than one storage file.

The persisted data covers three main areas:
- the Z/IP Gateway configuration data,
- the Z/IP Gateway-specific network and security data, and
- data for the nodes in the Z-Wave network.

\note The gateway is designed to find most of the data on the LAN IP side
from configuration settings, so the IP network does not merit a
separate area.

The description documents where the data is represented in
the running Z/IP Gateway and in the storage files.

It also covers how the data is represented in the files used in
migration from older controllers (mainly the human-readable \ref
zgw_json_schema) and internally in the Restore Tool database.  For
more details on the Restore Tool database, see \ref restore-db.

*********************************************************************
\subsection sec_conf Z/IP Gateway Configuration Data

The running Z/IP Gateway keeps most of its configuration settings in the
global struct \ref cfg (struct router_config).  The rest, mainly a few
file names, are global variables.

The configuration data is read from the zipgateway.cfg file.  A few of
the configuration settings can be updated dynamically, e.g., the extra
command classes.  In that case, the Z/IP Gateway updates the
zipgateway.cfg file.

A few settings can also be overwritten on the command line when
starting the Z/IP Gateway process. Such changes will not be persisted
to the configuration file.

The default values in the Default column are the defaults used by a
newly installed, unmodified Z/IP Gateway.

The Restore Tool has support for some of these settings in its
internal database (column Restore DB).  However, these fields are not
supported in the ZGW Data File format.


Field Description             | running gateway                    | zipgateway.cfg                 | Restore DB                   | Default value
----------------------------- | ---------------------------------- | ------------------------------ | ---------------------------- | -------------
Serial API path               | cfg.serial_port                    | ZipSerialAPIPortName           | zip_gateway_backup_data::serial_path | /dev/ttyACM0
Serial Log File               | cfg.serial_log                     | SerialLog                      | \a unsupported               | /tmp/ziprouter.serlog
Node DB (zipgateway.db) File  | linux_conf_database_file           | ZipGwDatabase                  | \a unsupported               | /etc/zipgateway.db
TunScript                     | linux_conf_tun_script              | TunScript                      | \a unsupported               | /usr/local/etc/zipgateway.tun
FinScript                     | linux_conf_fin_script              | FinScript                      | \a unsupported               | /usr/local/etc/zipgateway.fin
Z/IP NodeIdentify Script File | cfg.node_identify_script           | ZipNodeIdentifyScript          | \a unsupported               | zipgateway_node_identify_generic.sh
Provisioning Config           | linux_conf_provisioning_cfg_file   | ProvisioningConfigFile         | \a unsupported               | /usr/local/etc/zipgateway_provisioning_list.cfg
PVS Storage File path         | linux_conf_provisioning_list_storage_file| PVSStorageFile           | \a unsupported               | /etc/provisioning_list_store.dat
Configured ZGW Pan IPv6 prefix (0) | cfg.cfg_pan_prefix            | ZipPanIp6                      | \a unsupported               | fd00:bbbb::1, see note
UnsolicitedDestination 1 IP   | cfg.unsolicited_dest               | ZipUnsolicitedDestinationIp6   | zip_lan_ip_data::unsol_dest1 | fd00:aaaa::1234
UnsolicitedDestination 1 Port | cfg.unsolicited_port               | ZipUnsolicitedDestinationPort  | zip_lan_ip_data::unsol_port1 | 41230
UnsolicitedDestination 2 IP   | cfg.unsolicited_dest2              | ZipUnsolicitedDestination2Ip6  | zip_lan_ip_data::unsol_dest2 | fd00:aaaa::1234
UnsolicitedDestination 2 Port | cfg.unsolicited_port2              | ZipUnsolicitedDestination2Port | zip_lan_ip_data::unsol_port2 | 41231
Z/IP PSK                      | cfg.psk, cfg.psk_len               | ZipPSK              | zip_lan_ip_data::zip_psk, zip_psk_len   | 123456789012345678901234567890AA
ZipCaCert path                | cfg.ca_cert                        | ZipCaCert           | zip_lan_ip_data::zip_ca_cert_location   | /usr/local/etc/Portal.ca_x509.pem
ZipCert path                  | cfg.cert                           | ZipCert             | zip_lan_ip_data::zip_cert_location      | /usr/local/etc/ZIPR.x509_1024.pem
ZipPrivKey                    | cfg.priv_key                       | ZipPrivKey          | zip_lan_ip_data::zip_priv_key_location  | /usr/local/etc/ZIPR.key_1024.pem
ZipClient Key Size            | cfg.client_key_size                | ZipClientKeySize    | \a unsupported                          | 1024
ZGW Lan-side IPv6 address     | cfg.cfg_lan_addr, cfg.lan_addr     | ZipLanIp6           | zip_lan_ip_data::zgw_cfg_lan_addr       | fd00:aaaa::3
Lan-side next-hop IPv6 address | cfg.gw_addr                       | ZipLanGw6           | zip_lan_ip_data::zgw_cfg_lan_gw_ip6addr | fd00:aaaa::1234
Z/IP Portal IP address        | cfg.portal_url                     | ZipPortal                      | \a unsupported               | 192.168.1.1
Z/IP Portal Port              | cfg.portal_portno                  | ZipPortalPort                  | \a unsupported               | 44123
Z/IP TunPrefix                | cfg.tun_prefix                     | ZipTunPrefix                   | \a unsupported               | 2000::
Z/IP TunIp6PrefixLength       | cfg.tun_prefix_length              | ZipTunIp6PrefixLength          | \a unsupported               | 128
ZGW Manufacturer ID (1)       | cfg.manufacturer_id                | ZipManufacturerID              | zgw_node_product_id::manufacturerID | 0, see note
ZGW HardwareVersion (1)       | cfg.hardware_version               | ZipHardwareVersion             | \a unsupported                      | 1, see note
ZGW ProductID (1)             | cfg.product_id                     | ZipProductID                   | zgw_node_product_id::productType    | 1, see note
ZGW ProductType (1)           | cfg.product_type                   | ZipProductType                 | zgw_node_product_id::productID      | 1, see note
MailBox Port                  | cfg.mb_port                        | ZipMBPort                      | \a unsupported                  | 41230
MailBox Destination IP6       | cfg.mb_destination                 | ZipMBDestinationIp6            | \a unsupported                  | 0::0
ZGW Mailbox Enabled           | cfg.mb_conf_mode                   | ZipMBMode                      | \a unsupported                  | 1
Z/IP Client Command Classes (2) | cfg.extra_classes                | ExtraClasses                   | \a unsupported                  | NULL
Z-Wave RFRegion (3)           | cfg.rfregion                       | ZWRFRegion                     | \a unsupported                  | 0xFE, see note
Bridge Chip Power Level       | cfg.tx_powerlevel.normal           | NormalTxPowerLevel             | \a unsupported                  | NULL
Bridge Chip Measured0dBmPower | cfg.tx_powerlevel.measured0dBm     | Measured0dBmPower              | \a unsupported                  | NULL
Set Power Level Enabled       | cfg.is_powerlevel_set              | \b derived                     | \a unsupported                  | 0

\b Note 0 on ZGW PAN IPv6 prefix: If no IPv6 prefix is set in the cfg
file, the Z/IP Gateway will use the ZGW ULA PAN prefix (see section \ref
sec_netsecdata).

\b Note 1 on Manufacturer Specific Command Class fields: These fields are
used by the Z/IP Gateway when sending Command Class Reports, e.g., in the
Manufacturer Specific CC.

\b Note 2 on Z/IP Client Command Classes: For the purpose of this field, see
section \ref add_ccs.  Secure and non-secure classes are separated by
the "marker" 0xF100.  The secure classes are read into the field
router_config::sec_extra_classes.  The length of both fields are also
stored in router_config.

\b Note 3 on the RFRegion: The 0xFE code indicates that the region
should not be set.

\note When using the Restore Tool on a target platform with a
700-series bridge controller and the original gateway was running on a
500-series controller, remember to set the RF Region in the new
configuration file.


*********************************************************************
\subsection sec_netsecdata Network and Security Data

\subsubsection sec_lan IP (LAN) Network

The Z/IP Gateway process keeps its IP network settings as globals or as
fields in the global \ref cfg (of type router_config).  Since most of
these are configurable, they are covered in the previous section.

There are a few exceptions, e.g., IPv4 addresses are not stored at
all, but re-requested from the DHCP server.

Also, the Ethernet MAC address and IPv6 ULA addresses (RFC 4193) for the
Z-Wave and LAN sides are auto-generated and stored in the bridge
controller's application area.  The ULA addresses are only used if
no addresses are given in zipgateway.cfg.

The Z/IP Gateway also keeps state for the IP associations created by the
IP Association Command Class.  IP associations are persisted in the
zipgateway.db file.

\note IP associations are not covered by the Restore Tool.

In the Restore Database, IP network data is stored in the struct
zip_lan_ip_data (zgw_data::zip_lan_data).  For migration, only the
fields not covered by zipgateway.cfg are used.


\subsubsection sec_zwave Z-Wave Network

Since the Z/IP Gateway is also a Z-Wave controller, it reads Z-Wave
network data from the bridge controller over the serial API.  Some
of these fields are also stored to the zipgateway.db file.

The Restore Tool also reads this data from the bridge controller.
In the Restore Database they are stored as fields in the
struct zip_pan_data (zgw_data::zip_pan_data).


\subsubsection sec_sec Security

The security data on the IP side contains the DTLS and portal security
keys.  These are stored in zipgateway.cfg and in files pointed to by
zipgateway.cfg, so they have already been covered.

The security data on the Z-Wave side consists of the Z/IP Gateway's
private key, the S0 key, the S2 Access, Authenticated, and
UnAuthenticated keys, and the granted keys mask.

The Restore Tool reads the security data from the ZGW Data
File.  In the the Restore DB it is stored in \ref zw_security_t
(zip_pan_data::zw_security_keys, abbreviated zw_sec).


\subsubsection sec_guide_netsectable Reading Guide For the Table

The fields in this table do not have default values in the traditional
sense.

Some of them must be read from the bridge controller (\a n/a in
the default column and other columns).

The rest must be randomly generated (\b generated), except the
ECDHPrivateKey, which is required, and the assigned_keys.

The booting Z/IP Gateway will generate new values for the LAN fields if
they are 0 ("0/\b generated").

For the security keys, 0 is a legal value.  Instead, if the Z/IP Gateway
is SIS, it uses the assigned_keys bitmask to determine if a key is
valid.  If the bit is not set, a new key will be generated.

Note that this means that even though the Restore Tool reads the keys
from the ZGW Data File and restores them to the application
NVM, a restored key will be ignored by the Z/IP Gateway if the
corresponding assigned_keys bit is not set and the Z/IP Gateway is SIS.

\note When using the Restore Tool to import a gateway that does not
have all security keys (i.e., a non-secure or S0 gateway), the
assigned_keys bitmask in the ZGW Data File MUST NOT include the missing
keys.

\note When using the Restore Tool to import a gateway, all keys
corresponding to the bits set in the assigned_keys bitmask MUST be
defined in the ZGW Data File.

The ECDH key MUST be in the ZGW Data File, it is \b REQUIRED if it
is not present in the module NVR, i.e., the controller is a pre SDK6.70
controller.

In the Default column, \b derived means that the value is computed from another field.




Field Description    | running gateway            | zipgateway.db| Appl NVM        | Serial API FUNC_ID  | Restore DB             | ZGW Data File         | Default
-------------------- | -------------------------- | ------------ | --------------- | ------------------- | ---------------------- | --------------------- | -----------
ZGW node id (1)      | MyNodeID                   |network.homeid| -               | MEMORY_GET_ID       | MyNodeID               | ZW Net ID.nodeId, see note | \a n/a
Home ID (2)          | homeID                     |network.nodeid| -               | MEMORY_GET_ID       | homeID                 | ZW Net ID.homeId, see note | \a n/a
SIS node id (3)      | see note                   | -            | -               | ZW_GET_SUC_NODE_ID  | \a n/a                 | \a unsupported        | \a n/a
SmartStart support (4) | cfg.enable_smart_start   | -            |                 | see note            | \a n/a                 | \a n/a                | \a n/a
virtual node ids     | temp_assoc_virtual_nodeids | virtual_nodes.virtual_id | - | ZW_GET_VIRTUAL_NODES|                        | \a unsupported        | \a n/a
IP association table | association_table          |  ip_association | -          | -            | \a unsupported          | \a unsupported              | \a unsupported
Ethernet MAC addr    | uip_lladdr                 |  -           | mac_addr        | -            |zip_lan.zgw_uip_lladdr   | zipLanData/macAddress       | 0/\b generated
IPv6 ULA PAN prefix  | (cfg.pan_prefix)           |  -           | ula_pan_prefix  | -            |zip_pan.ipv6_pan_prefix  | \a unsupported              | 0/\b generated
IPv6 ULA LAN address | (cfg.lan_addr)             |  -           | ula_lan_addr    | -            |zip_lan.zgw_ula_lan_addr | \a unsupported              | 0/\b generated
S0 level (5)         | ctx.net_scheme             |  -           | security_scheme | -            |zw_sec.assigned_keys     | zgwZWNodeData/grantedKeys, see note | see note
security_netkey      | -                          |  -           | security_netkey | -            |zw_sec.security_netkey   | zwSecurity/S0key            | \b generated
S2 assigned keys mask (5) | assigned_keys         |  -           | assigned_keys   | -            |zw_sec.assigned_keys     | zgwZWNodeData/grantedKeys, see note | see note
S2 Access key        | -                          |  -           | security2_key[2] | -           |zw_sec.security2_key[2]  | zwSecurity/S2AccessKey      | \b generated
S2 Auth key          | -                          |  -           | security2_key[1] | -           |zw_sec.security2_key[1]  | zwSecurity/S2AuthenticatedKey | \b generated
S2 UnAuth key        | -                          |  -           | security2_key[0] | -           |zw_sec.security2_key[0]  | zwSecurity/S2UnauthenticatedKey | \b generated
ecdh private key     | -                          |  -           | ecdh_priv_key   | -            |zw_sec.ecdh_priv_key     | zwSecurity/ECDHPrivateKey   | \b REQUIRED*

\b Note 1 on Z/IP Gateway node ID: The Restore Tool uses the node ID
from the bridge controller to identify the gateway node in the ZGW
Data File's list of Z-Wave nodes. The rules used to read a Z-Wave
node id from the ZGW Data File are described in \ref
sec_zwnetdatatable, Note 3.

\b Note 2 on home ID: The Restore Tool reads the home ID from the
bridge controller.  The ZGW Data File parser will skip a node with a uid
where the homeID field does not match the home ID of the bridge
controller.


\b Note 3 on SIS node ID: Not actually maintained in the running gateway.
Used by the restore tool to determine if the gateway itself is SIS.

\b Note 4 on SmartStart: Enabled on the running gateway if it is supported
in the bridge controller and the gateway is SIS, i.e., this is not a
configurable field and does not need to be stored.

\b Note 5 on assigned keys: The Restore Tool computes the assigned keys
for the gateway from the zgwZWNodeData/grantedKey field in the ZGW Data File
entry for the Z/IP Gateway node.  Note that the grantedKeys are stored
in node cache format, whereas the assigned keys are stored in libs2
keystore format (see \ref keystore in libs2).

The assigned keys are stored to two different fields in the
Application NVM area, zip_nvm_config::security_scheme (S0 only) and
zip_nvm_config::assigned_keys.

If the Z/IP Gateway is SIS, it will grant itself all keys when the
Z/IP Gateway process starts up and re-generate any missing keys.

\b Note 6 on ECDH private key
 ECDH private key, it from this key the Learnmode DSK is calculated. If the key is not available in
the NVR of the module, it will be read from the NVM of the module. Controllers earlier than the SDK6.70
do not have a DSK in the NVR. The module NVR/Device Information page, can only be
programmed by a external programmer, usually at manufacturing time.

*********************************************************************
\subsection sec_zwnetdata The Z-Wave Node Data

The data stored for the Z-Wave nodes is hierarchical, with a data set
for each node, and for each node, a data set for each of its
endpoints.  The node itself, aka, the "root device", always exists, so
all nodes have at least one endpoint.

Most node data and its endpoints are set during the add
node process or the interview immediately following the add.  This is
handled by the \ref ZIP_Resource.  This component also handles
liveness detection for nodes.

\note The Z/IP Gateway does not store Z-Wave routing information, that
is handled in the bridge controller.

The ZGW Data File used by the Restore Tool MUST have a zgw/nodeList
element. The nodeList MUST contain the Z/IP Gateway's own node data.


\subsubsection sec_guide_zwnettable Reading Guide For the Node Data Table

If a field has some special properties, this is documented in the
notes after the table.

The Default column refers to the default used by the Restore Tool if
the field is not included in, or cannot be computed from, the ZGW Data
File.

In the ZGW Data File column, \b derived means computed from another
Data File field, \b composite means computed from more that one other
field.  \b REQUIRED means that the field must be defined in the ZGW
Data File, so no default exists in the Restore Tool.  Some fields are
only required if the node interview state is DONE and are marked \b
required.  This is also used for fields that are not supported by all
devices, but that MUST be included if they are supported and the
interview state is DONE.

In Restore DB column \b composite means computed from more than one
other Restore DB field (which can again be computed from Restore DB or
ZGW Data File fields).

\subsubsection sec_zwnetdatatable The Z-Wave Node Data Table

For each node in the Z-Wave network, including itself, the Z/IP Gateway maintains the following data.

Field Description     | running Resource Directory    | zipgateway.db                   | running provisioning list | pvl.dat | Restore DB     | ZGW Data File   | Default
-----------------     | ---------------               | ---------------               | -- | -------- | ------------------------------------ | --------------- | -------
PARENT FIELD          | \ref rd_node_database_entry   | nodes                         |   |  | \ref zgw_node_data                            | <a href="migration.html#zgw_json_zgw_nodeList_zgwZWNodeData"><b>zgwZWNodeData</b></a> | -
wakeup interval (1)   | wakeUp_interval               | wakeUp_interval               |   |  | node_gwdata.liveness. wakeUp_interval         | wakeUpInterval  | 4200
last Awake (2)        | lastAwake                     | lastAwake                     |   |  | node_gwdata.liveness.lastAwake                | lastAwake       | see note
last probe update (2) | lastUpdate                    | lastUpdate                    |   |  | node_gwdata.liveness.lastUpdate               | lastUpdate      | see note
Z-Wave node id (3)    | nodeid                        | nodeid                        |   |  | node_gwdata.zw_node_data. node_id             | \b composite    | \b REQUIRED
security flags (4)    | security_flags                | security_flags                |   |  | node_gwdata.security_flags                    | grantedKeys     | 0
mode (5)              | mode                          | mode                          |   |  | see note                                      | \b composite    | see note
state (6)             | state                         | state                         |   |  | see note                                      | \b composite    | see note
manufacturerID (16)   | manufacturerID                | manufacturerID                |   |  | node_gwdata.node_prod_id. manufacturerID      | nodeProdId/manufacturerID | \b required
productType (16)      | productType                   | productType                   |   |  | node_gwdata.node_prod_id. productType         | nodeProdId/productType | \b required
productID (16)        | productID                     | productID                     |   |  | node_gwdata.node_prod_id. productID           | nodeProdId/productID | \b required
nodeType (7)          | nodeType                      | nodeType                      |   |  | node_gwdata.zw_node_data. node_type           | \a n/a              | \a n/a, see note
refCnt                | refCnt                        | n/a                           |   |  | \a n/a                                        | \a n/a              | 0
number of endpoints   | nEndpoints                    | n/a                           |   |  | node_gwdata.nEndpoints                        | \b derived, see zgw_node_zw_data::nEndpoints | \b required
number of agg eps     | nAggEndpoints                 | nAggEndpoints                 |   |  | node_gwdata.nAggEndpoints                     | \b derived, see zgw_node_zw_data::nAggEndpoints | \b required
endpoint list (8)     | endpoints                     | n/a                           |   |  | node_gwdata.endpoints                         | endpoints        | \b REQUIRED
node name             | nodename                      | name                          |   |  | ip_data.mDNS_node_name                        | mDNSNodeName     | NULL
node name length      | nodeNameLen                   | n/a                           |   |  | ip_data.mDNS_node_name_len                    | \b derived       | 0
node DSK (10)         | dsk                           | dsk                           | dsk     | dsk     | node_uid.dsk_uid.dsk             | nodeUID.DSK      | NULL
node DSK length       | dskLen                        | n/a                           | dsk_len | dsk_len | node_uid.dsk_uid.dsk_len         | \b derived       | 0
Version V3 flags (11)  |node_version_ cap_and_zwave_sw |node_version_ cap_and_zwave_sw |   |  | node_version_ cap_and_zwave_sw               | versionCap       | 0x00
node interview flags (12) | probe_flags               | probe_flags                   |   |  | node_gwdata.probe_state. probe_flags          | \b composite     | NEVER_STARTED
node properties (17)  | node_properties_flags         | node_properties_flags         |   |  | node_gwdata.probe_state. node_properties_flags| \b composite, see zgw_node_probe_state::node_properties_flags  | \b required
ZW probe flag         | node_is_zws_probed            | node_is_zws_probed            |   |  | node_is_zws_probed                            | isZwsProbed      | 0x00
Node CC versions (13) | node_cc_versions              | cc_versions                   |   |  | node_gwdata.probe_state. node_cc_versions     | probeState.ccVersions | [0,0,0,0,0,0,0]
Node CC vers len (14) | node_cc_versions_len          | n/a                           |   |  | node_gwdata.probe_state. node_cc_versions_len | \a n/a              | see note
pcvs (15)             | pcvs                          | \a n/a, see note                 |   |  | \a unsupported                                | \a unsupported, see rd_node_database_entry::pcvs | NULL
PVL status            | \a n/a                           | \a n/a                           | status      | status     | \a unsupported            | \a unsupported      | PENDING
PVL bootmode          | \a n/a                           | \a n/a                           | bootmode    | bootmode   | \a unsupported            | \a unsupported      | SMART_START
TLV list              | \a n/a                           | \a n/a                           | pvs_tlvlist |pvs_tlvlist | \a unsupported            | \a unsupported      | NULL


\b Note 1 on Wake Up Interval.  The Wake Up Interval for sleeping
nodes is normally determined during the inclusion interview.  If the
interview_state for a sleeping node is set to \ref node_interview during
migration, the Z/IP Gateway does not know the Wake Up Interval, and it
should not try to interview the node either, since it is probably not
awake.  Therefore, the Z/IP Gateway will delay the interview of nodes that have
rd_node_database_entry::mode MODE_NONLISTENING or MODE_MAILBOX until
the first time it gets a Wake Up Notification from the node.

The Z/IP Gateway only processes WUNs if the ZGW Mailbox feature is
enabled. To ensure that the Restore Tool is functioning correctly for a sleeping
node on a non-Mailbox Z/IP Gateway, the ZGW Data File MUST contain all
data for that node and set probeState to DONE.


\b Note 2 on lastAwake and lastUpdate.  The lastAwake timestamp is
used to determine if a node is failing.  It is also used to compute
the ZIP_PACKET_EXT_EXPECTED_DELAY.  The lastUpdate timestamp is used
in the Node Info Cached Report.

The timestamps are set in the format of the Z/IP Gateway's internal
monotonic clock, i.e., they are not linearly related to UTC time.
For example, some systems may restart the system clock from 0 every time the
system is rebooted.

To ensure that nodes are not reported as failing too early, the
Z/IP Gateway resets lastAwake to current time when booting if the node
has state STATUS_DONE or if the node has mode MODE_MAILBOX and wake up
interval is set to 0.

The lastUpdate field is not modified when the Z/IP Gateway starts up, so
the age field in the Node Info Cached Report may be misleading after
system reboot.

The Restore Tool has no data about the age of the node data, even if
the node interview state is node_do_not_interview, so it sets both
these fields fields to 0.

When the Z/IP Gateway starts up, it will update the lastAwake field
either immediately or as part of the initial interview, if an
interview is requested in the ZGW Data File.  The only exception is if
the node is non-listening and needs to be interviewed. In this case,
the Z/IP Gateway will treat the node as a node with Wake Up Interval 0
until it can complete an interview.

For the lastUpdate field, the age information in Node Info Cached
Report may be incorrect after migration.


\b Note 3 on node ID: The node ID may appear two places in the ZGW
Data File: in the nodeUID field (if the nodeUID/uidType is "ZW Net
ID") and in the zgwZWNodeData/zwNodeData field.  If the
nodeUID/uidType is "DSK", the zgwZWNodeData/zwNodeData/nodeId field
must be present.  If both are present, but they are not the same or if
the bridge controller does not contain this id, the node will not be
imported by the Restore Tool.

Note that if the nodeUID/uidType is "ZW Net ID", the Restore Tool will
skip the node if the homeID field does not match the home ID of the
bridge controller.


\b Note 4 on security flags: In the Restore Tool, the zgwZWNodeData/grantedKeys field is
handled differently for the gateway itself and for other Z-Wave nodes.

For the gateway itself, see "S2 assigned keys mask" in the previous
table.  The default value in the Restore Tool is 0 (no keys), but if
the gateway is SIS, the Z/IP Gateway will re-generate any missing keys
when it starts up.

For the nodes, grantedKeys is not a required field, but if it is not
given, the probe_state of the node will be set ("down-graded") to
node_interview by the Restore Tool.

\note This implies that grantedKeys MUST be included in the ZGW Data
File for sleeping nodes on a non-Mailbox Z/IP Gateway.


\b Note 5 on rd_node_database_entry::mode:

The Z/IP Gateway sets the node's mode field to \ref
MODE_ALWAYSLISTENING, \ref MODE_FREQUENTLYLISTENING, or \ref
MODE_NONLISTENING based on the node capability and security fields
read from the bridge controller.  During the node probe, the
Z/IP Gateway changes the node's mode to \ref MODE_MAILBOX if the node
supports COMMAND_CLASS_WAKE_UP and Mailbox is enabled in the gateway
when the node is interviewed.

The Restore Tool sets a node's mode to \ref MODE_ALWAYSLISTENING or
\ref MODE_FREQUENTLYLISTENING in the same way, but it sets all
non-listening nodes to \ref MODE_MAILBOX.

The mode field is also used for the flags \ref MODE_FLAGS_FAILED and
\ref MODE_FLAGS_DELETED.  The Restore Tool does not set these flags.


\b Note 6 on state: The rd_node_database_entry::state field is a
composite field containing both the interview state and the liveness
state.  In the ZGW Data File, these are represented separately.

The Restore Tool will set the state to ZGW_NODE_FAILING if the node's
liveness state is \ref ZGW_NODE_FAILING.  Otherwise, it sets the state to
STATUS_DONE if probeState is DONE in the Data File and it has not been
down-graded due to issues with some of the other ZGW Data File fields;
it will set the state to STATUS_CREATED if the node should be
interviewed.  The default value for zgwZWNodeData/probeState/state is
RE-INTERVIEW.

When the Z/IP Gateway starts up, it will change STATUS_CREATED to
STATUS_PROBE_FAIL if the node is non-listening.


\b Note 7 on node type: The nodeType stored in the RD node is Z-Wave
basic type.  The Restore Tool reads this from the bridge controller
with FUNC_ID_ZW_GET_NODE_PROTOCOL_INFO.


\b Note 8 on endpoint list: The Z/IP Gateway represents the root device
as an endpoint with id 0 in the Resource Directory and the ZGW Data File
format uses the same structure.  This means that a node must have at
least one endpoint.  The Restore Tool will ignore data for a node that
has no endpoints if the node interview state is DONE.



\b Note 10 on node DSK: The Restore Tool gets the node DSK from the node UID
in the ZGW Data File.


\b Note 11 on the Version V3 flags: In the Restore Tool, the Version
V3 flags are set from the ZGW Data File field probeState/versionCap,
but are correlated with the "isZwsProbed" field.  If "probeState" is
DONE and "isZwsProbed" is true, version capabilities must be 0x03,
otherwise the data on the node is ignored.


\b Note 12 on the interview/probe flags: The Restore Tool sets the
probe_flags based on the probe_state.

If interview state is DONE in ZGW Data File the probe_flags is set to
RD_NODE_FLAG_PROBE_HAS_COMPLETED.

If interview state is RE-INTERVIEW, probe_flags is set to
RD_NODE_PROBE_NEVER_STARTED.  If interview state is missing or
interview state is changed to node_interview due to down-grade, it is
also set to RD_NODE_PROBE_NEVER_STARTED.

When the Z/IP Gateway starts up, it will set probe_flags to
RD_NODE_PROBE_NEVER_STARTED if the node state is STATUS_CREATED and
the node is non-listening.  This will trigger the re-interview of the
node when ZGW receives a WUN from the node.


\b Note 13 on node command class versions: For each node in the
network, the Z/IP Gateway stores the versions of the command classes
that the gateway controls and the node supports. This is done to
comply with Version CC V3 requirements.

In the Restore Tool, the ccVersions field for a node should describe
the versions of all the endpoints of the node, including the root
device.  The Restore Tool will only import the command classes, that
are controlled by the Z/IP Gateway, from the ccVersions field.

If the versions are not available, the ccVersions field can be omitted
and the default value of "version 0" (that represents the unknown
version) will be used for all command classes.


\b Note 14 on node_cc_versions_len: The node_cc_versions_len is a
gateway constant, since it only depends on the command classes
controlled by the gateway.  Note that it may change between different
versions of the Z/IP Gateway.


\b Note 15 on pcvs (\ref ProbeCCVersionState_t): This field is not
persisted, so it has no equivalence in the zipgateway.db file.


\b Note 16 on manufacturer specific information: The Restore Tool
requires the manufacturer Id, product Type, and product Id to be
provided if the node interview state is DONE.


\b Note 17 on the node properties flags.

If the Z/IP Gateway detects that a node is a portable slave during the
initial interview, it sets the \ref RD_NODE_FLAG_PORTABLE on the
rd_node_database_entry::node_properties_flags.

In the Restore Tool, the probeState/ZWplusRoleType MUST be set to
portableSlave in the ZGW Data File if the node interview state is
DONE.  This enables the Restore Tool to set the RD_NODE_FLAG_PORTABLE
correctly.

The Z/IP Gateway sets the \ref RD_NODE_FLAG_ADDED_BY_ME flag on a node if the
gateway itself has handled security negotiations with the node.  The flag
ensures that the security of the node cannot be downgraded when the
node is interviewed.

The Restore Tool will set the RD_NODE_FLAG_ADDED_BY_ME flag if the
grantedKeys are set in the ZGW Data File.


\subsubsection sec_eptable Endpoint Data for the Z-Wave Nodes

For each endpoint of a node:

Field Description    | running Resource Directory | zipgateway.db | provisioning list | pvl.dat  | Restore DB                      | ZGW Data File       | Default
-----------------    | ------------------  | -------------------  | ------------- | ------------ | --------------------------      | ------------------- | --------
PARENT FIELD         |rd_ep_database_entry |endpoints| TLV, note (1) | TLV      | zgw_node_ep_data                    | <a href="migration.html#zgw_json_zgw_nodeList_zgwZWNodeData_endpoints"><b>endpoints</b></a> | -
endpoint list (2)    | list                | n/a, see note             | -             | -        | zgw_node_ep_data::ep_list           | see note            | \a n/a
node reference (3)   | node, \b generated  | n/a, see note             | -             | -        | \a n/a                              | \a n/a              | \a n/a
Endpoint ID (7)      | endpoint_id         | endpoint_id          | -             | -        | zgw_node_ep_data::endpoint_id       | \b derived, see note | \a n/a
Probe State (6)      | state               | state                | -             | -        | zgw_node_ep_data::state             | \b composite        | see note
installer iconID (10)| installer_iconID    | installer_iconID     | -             | -        | zgw_node_ep_data::installer_iconID  | installerIcon       | \b required
user iconID (10)     | user_iconID         | user_iconID          | -             | -        | zgw_node_ep_data::user_iconID       | userIcon            | \b required
endpoint info (5)    | endpoint_info       | info                 | -             | -        | zgw_node_ep_data::endpoint_info     | endpointInfoFrames  | \b required, see note
endpoint location    | endpoint_location   | location             | TLV, note (1) | TLV      | zgw_ep_mDNS_data::endpoint_location | mDNSinfo.location   | NULL
endpoint name (8)    | endpoint_name       | name, see note       | TLV, note (1) | TLV      | zgw_ep_mDNS_data::endpoint_name     | mDNSinfo.name       | NULL, see note
endpoint agg (9)     | endpoint_agg        | aggr, see note       | -             | -        | zgw_node_ep_data::endpoint_agg      | endpointAggregation | see note
endpoint info_len (5)| endpoint_info_len   | n/a                  | -             | -        | zgw_node_ep_data::endpoint_info_len | \b composite        | see note
endpoint name_len (8) | endpoint_name_len  | n/a                  | TLV           | TLV      | zgw_ep_mDNS_data::endpoint_name_len | \b derived          | 0, see note
endpoint loc_len     | endpoint_loc_len    | n/a                  | TLV           | TLV      | zgw_ep_mDNS_data::endpoint_loc_len  | \b derived          | 0
endpoint aggr_len (9) | endpoint_aggr_len  | n/a                  | -             | -        | zgw_node_ep_data::endpoint_aggr_len | \b derived          | see note

\b Note 1 on provisioning list TLVs Name and Location: The name and
location may exist as TVLs 50 and 52 for the root device (endpoint 0).
The other endpoints cannot get a name or location through the PVL.
The ZGW does not correctly update the name and location in the PVL if
they are changed on the node after inclusion, nor does it update the
RD if name or location are changed through the provisioning list after
inclusion (ZGW-2193).


\b Note 2 on endpoint list: The endpoints are stored as a Contiki list
in the node data structure.  The endpoint list is generated by the
Z/IP Gateway when it imports from zipgateway.db.  Similarly, the Restore
Tool generates the endpoint list in the Restore DB when it reads the
ZGW Data File.


\b Note 3 on node reference: The pointer back to an endpoint's node is
generated by the Z/IP Gateway when it imports from zipgateway.db.  The
Restore DB does not need this "back-pointer", since the endpoints are
stored with, and only accessed from, the parent node.


\b Note 5 on on endpoint_info: The endpoint info field in the Resource Directory
contains the generic and specific device classes and the endpoint's
NIF and secure NIF.

The Restore Tool computes the contents of the Restore DB field from

- the Data File fields InfoFrames/nonSecureNIF and
endpointInfoFrames/secureNIF,

- the index of the endpoint (the command classes zip_naming and zip
must be added to the non-secure supported command classes of endpoint
0),

and inserts the separator mark between the non-secure and secure
command classes.  The nonSecureNIF field in the ZGW Data File must
contain the generic and specific device classes of the endpoint as
well as the supported command classes.  The endpoint_info_len is
computed as well.

In the Restore Tool, the nonSecureNIF, and the secureNIF if supported,
are required for all non-aggregated endpoints of a node if the node's
interview state is DONE.  If the nonSecureNIF is not provided for one
of the non-aggregated endpoints, the interview state will be
down-graded to RE-INTERVIEW.  If the secureNIF field is not provided,
the restored Z/IP Gateway will \b not be able to communicate with the
node.


\b Note 6 on endpoint probe state: when the Z/IP Gateway starts up, it
sometimes sets the endpoint probe state from the node state.  If node
state is STATUS_CREATED, the endpoint state is set to
EP_STATE_PROBE_INFO.  If the node state is STATUS_DONE, it will set
endpoint state to EP_STATE_MDNS_PROBE.

In any other node state, particularly STATUS_FAILING or
STATUS_PROBE_FAIL, the endpoint state is not changed.

The Restore Tool default for endpoint state is EP_STATE_PROBE_INFO.


\b Note 7 on endpoint ID: The Restore Tool derives the endpoint ID
from the index in the list of endpoints.  Endpoint 0 represents the
root device in the Z/IP Gateway and in the ZGW Data File.

It is possible to write an endpointId in the ZGW Data File.  For a
node with many endpoints, this can make the file more readable.  If
this field is used, it MUST match the index.

\b Note 8 on mDNS names: If the mDNS-name of an endpoint is NULL, the
Z/IP Gateway generates a string from the generic device type, the home
ID, the node ID and the endpoint ID.  For this reason, the Restore
Tool can use NULL as default.

\b Note 9 on aggregated endpoints.  The aggregated endpoints are
required to be after the regular endpoints.  When the Restore Tool
reads the endpoint list, it considers an endpoint to be aggregated if
it contains zgwZWNodeData/endpoints/endpointAggregation.

\b Note 10 on icon: The Z/IP Gateway sets its own installer icon and user icon
to \ref ICON_TYPE_GENERIC_GATEWAY.

*/
